
=pod

=head1 COPYLEFT

Flex_WPS.pm, v1.0 beta 24 01/12/2011 N.K.A.

Flex Web Portal System Evolution 3

This object is a compilation of methods I normaly use
for web page programing.

shakaflex [at] gmail.com
 
http://search.cpan.org/~sflex/

=head1 Main Object Functions


        use Flex_WPS;
        $Flex_WPS = Flex_WPS->new();
        # $Flex_WPS->function();
        

=head2 array2file(%file_settings)

Used for flat file editing and can handle strings too.

        # clear file content
        $Flex_WPS->array2file(
         file => 'Path/To/File',
        );
        
        # replace content of file with string
        $Flex_WPS->array2file(
         file => 'Path/To/File',
         string => $file_content
        );

        # replace content of file with array
        $Flex_WPS->array2file(
         file => 'Path/To/File',
         array => $file_content
        );
        
=head2 box_footer

returns HTML for box_header

This is used for the side menus and blocks.

=head2 box_header

returns HTML for box_footer

This is used for the side menus and blocks.

=head2 calc_time_diff($date1, $date2, $type)

Calculate difference between two dates.

leave $type blank to Calculate difference in hours

set $type to a positive value to Calculate difference in days

=head2 check_access

Commen Security Levels from high to low are: $usr{admin}, $usr{mod}, $usr{user}, $usr{anonuser}.

This works off the super_mod_places table for direction or defaults to the Portals commen security levels
and what setting "sec_lvl" is.

the class_sub setting is not bound to the file's name but its used as that actions name but
to keep some organization to the names and locations its used I some times name it
"Package_Name::action"

these settings can be edited in "Site Admin >> Super Paths"

Example:

        my $admin_link = '';
        
        $admin_link = 'This link for admin'
         if $Flex_WPS->check_access(
         class_sub => 'Portal_File::view-adminlink',
         sec_lvl   => $usr{admin},
        );

=head2 core_error($error)

Initialize a core error

This gets logged to /db/fatal_error.log

=head2 dir2array($directory_path)

returns contens of that Directory in an array

=head2 eval_theme_tags($string)

Evaluate tags for a theme

=head2 file2array($file_path, $chomp)

returns file contens as an array

=head2 file2scalar($file_path, $chomp)

returns file contens as a scalar

=head2 format_date($date, $type)

        Setting         format
        -1              15/01/2000 - 03:15:30
        0 or 11         01/15/00, 15:15:30
        1               15.01.00, 15:15:30
        2               15.01.2000, 15:15:30
        3               Jan 15th, 2000, 3:15pm
        4               15. Jan 2000, 15:15
        5               01/15/00, 3:15pm
        6               Sunday, 15 January, 2000

=head2 get_date

gets current date with time offset

=head2 page_redirect

redirect with a cookie, uses Flex_CGI->redirect

=head2 print_page(....)

This is used to print the markup, cookies, "location" for subload, ajax location
 and navigation

        $Flex_WPS->print_page(
         markup       => $html,
         cookie1      => '',
         cookie2      => '',
         location     => '',
         ajax_name    => '',
         navigation   => 'Page Title',
        );

=head2 send_email()


        my $email_ok = $Flex_WPS->send_email(
         from => $email,
         to => $to_mail,
         subject => $subject,
         message => $message,
        ) || '';

=head2 sha1_code($code1, $code2)

returns sha1 hex of the 2 strings

=head2 SQL_Edit($backend, $SQL_string)

uses the "do" for INSERT, UPDATE and DETETE commands on a backend

=head2 SubLoad($location)

Loads extra sub's where you want

Known Bug:

Starting to name sub's as Class_SubName, to prevent a bug in %sub_action hash.

=head2 untaint(pattern => '\w', value => 'dood')

check =~ a value with a pattern

=head2 untaint2(pattern => '\w', value => 'dood')

check !~ a value with a pattern


=head2 user_error($error)

print an error for any user in the Portal, this does not need to log


=cut
